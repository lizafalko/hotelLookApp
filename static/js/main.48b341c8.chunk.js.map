{"version":3,"sources":["img/icon01.svg","img/icon02.svg","img/icon03.svg","img/icon04.svg","IconSegment.js","Advantages.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconSegment","props","react_default","a","createElement","className","src","icon","alt","description","Advantages","src_IconSegment","Range","Offers","Shopping","Speed","App","src_Advantages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0KCWzBC,MATR,SAAqBC,GAC1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMF,UAAU,sBAAsBG,IAAI,KAC1DN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAA6BJ,EAAMQ,+ECevCC,MAdR,WACL,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,6EACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACO,EAAD,CAAaJ,KAAMK,IAAOH,YAAY,uJACtCP,EAAAC,EAAAC,cAACO,EAAD,CAAaJ,KAAMM,IAAQJ,YAAY,oIACvCP,EAAAC,EAAAC,cAACO,EAAD,CAAaJ,KAAMO,IAAUL,YAAY,4GACzCP,EAAAC,EAAAC,cAACO,EAAD,CAAaJ,KAAMQ,IAAON,YAAY,wFCH/BO,MARf,WACE,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMsB,WAAP,KACEvB,EAAAC,EAAAC,cAACsB,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.48b341c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon01.1ba9828d.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon02.d4a098c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon03.d578b2f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon04.eecf9a5d.svg\";","import React from 'react';\n\nexport function IconSegment(props) {\n  return (\n    <div className=\"icon-segment\">\n      <img src={props.icon} className=\"icon-segment__image\" alt=\"\" />\n      <p className=\"icon-segment__description\">{props.description}</p>\n    </div>\n  );\n}\n\nexport default IconSegment;\n","import React from 'react';\nimport IconSegment from './IconSegment';\nimport Range from './img/icon01.svg';\nimport Offers from './img/icon02.svg';\nimport Shopping from './img/icon03.svg';\nimport Speed from './img/icon04.svg';\n\nexport function Advantages() {\n  return (\n    <div className=\"advantages\">\n      <h2 className=\"advantages__heading\">Преимущества:</h2>\n      <div className=\"advantages__icons\">\n        <IconSegment icon={Range} description=\"Всегда большой ассортимент\" />\n        <IconSegment icon={Offers} description=\"Уникальные предложения\" />\n        <IconSegment icon={Shopping} description=\"Комфортный шоппинг\" />\n        <IconSegment icon={Speed} description=\"Быстро и просто\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Advantages;\n","import React from 'react';\n// import logo from './logo.svg';\nimport Advantages from './Advantages';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Advantages />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}